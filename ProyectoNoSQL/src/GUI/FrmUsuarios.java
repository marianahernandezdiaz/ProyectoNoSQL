package GUI;

import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.DefaultComboBoxModel;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author Jonathan Esquivel Flores
 */
public class FrmUsuarios extends javax.swing.JFrame {

    /**
     * Creates new form FrmEmpleados
     */
    
    public FrmUsuarios() {
        initComponents();
        cargarDepartamentos();
    }

    public void listarEmpleado()
    {
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        // --- DECLARACIÓN DE COMPONENTES ---

        // Agrupa componentes como radio buttons para que solo uno pueda ser seleccionado a la vez.
        grupoBotones = new javax.swing.ButtonGroup();
        // Panel principal que actúa como contenedor para todos los demás componentes.
        panelPrincipal = new javax.swing.JPanel();
        // Etiqueta para el campo "Número de Empleado".
        etiquetaNumeroEmpleado = new javax.swing.JLabel();
        // Campo de texto para que el usuario ingrese el número de empleado.
        campoNumeroEmpleado = new javax.swing.JTextField();
        // Etiqueta que muestra el título del formulario, por ejemplo, "Altas usuarios".
        etiquetaTitulo = new javax.swing.JLabel();
        // Etiqueta para el campo "Nombre(s)".
        etiquetaNombres = new javax.swing.JLabel();
        // Campo de texto para ingresar el apellido paterno del usuario.
        campoApellidoPaterno = new javax.swing.JTextField();
        // Etiqueta para el campo "Primer apellido".
        etiquetaApellidoPaterno = new javax.swing.JLabel();
        // Campo de texto para ingresar el apellido materno del usuario.
        campoApellidoMaterno = new javax.swing.JTextField();
        // Etiqueta para el campo "Segundo apellido".
        etiquetaApellidoMaterno = new javax.swing.JLabel();
        // Campo de texto para el correo electrónico principal.
        campoEmailPrincipal = new javax.swing.JTextField();
        // Etiqueta para el campo "Correo principal".
        etiquetaEmailPrincipal = new javax.swing.JLabel();
        // Etiqueta para el campo "Correo secundario".
        etiquetaEmailSecundario = new javax.swing.JLabel();
        // Campo de texto para el RFC del usuario.
        campoRfc = new javax.swing.JTextField();
        // Etiqueta para el campo "Teléfono".
        etiquetaTelefono = new javax.swing.JLabel();
        // Campo de texto para los nombres del usuario.
        campoNombres = new javax.swing.JTextField();
        // Etiqueta sin texto, usada probablemente para alineación o un propósito futuro.
        etiquetaVacia1 = new javax.swing.JLabel();
        // Etiqueta para el campo "Departamento".
        etiquetaDepartamento = new javax.swing.JLabel();
        // Campo de texto seguro para la contraseña del usuario.
        campoEmailSecundario = new javax.swing.JTextField();
        // Etiqueta para el campo "Sexo".
        etiquetaSexo = new javax.swing.JLabel();
        // Menú desplegable (ComboBox) para seleccionar el género del usuario.
        selectorGenero = new javax.swing.JComboBox<>();
        
        selectorDepartamento = new javax.swing.JComboBox<>();
        // Botón para ejecutar la acción de agregar un nuevo usuario.
        botonAgregar = new javax.swing.JButton();
        // Botón con el texto "Siguiente", para pasar a otra pantalla o paso.
        botonSiguiente = new javax.swing.JButton();
        // Botón para limpiar todos los campos del formulario.
        botonLimpiar = new javax.swing.JButton();
        // Etiqueta para el campo "RFC".
        etiquetaRfc = new javax.swing.JLabel();
        // Etiqueta para el campo "CURP".
        etiquetaCurp = new javax.swing.JLabel();
        // Botón para cerrar el formulario o la aplicación.
        botonSalir = new javax.swing.JButton();
        // Campo de texto para el número de teléfono del usuario.
        campoTelefono = new javax.swing.JTextField();
        // Campo de texto para el CURP del usuario.
        campoCurp = new javax.swing.JTextField();

        // --- CONFIGURACIÓN DE LA VENTANA Y PANELES ---

        // Define que la aplicación se cerrará al hacer clic en la 'X' de la ventana.
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        // Establece un layout absoluto para posicionar componentes por coordenadas exactas.
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        // Configura el panel principal con un fondo blanco y layout absoluto.
        panelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        panelPrincipal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        // --- CONFIGURACIÓN Y POSICIONAMIENTO DE CADA COMPONENTE ---

        // Configura la etiqueta "Numero de Empleado"
        etiquetaNumeroEmpleado.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaNumeroEmpleado.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaNumeroEmpleado.setText("Numero de Empleado:");
        panelPrincipal.add(etiquetaNumeroEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, -1, -1));

        // Configura el campo de texto para el número de empleado
        campoNumeroEmpleado.setBackground(new java.awt.Color(255, 255, 255));
        campoNumeroEmpleado.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoNumeroEmpleado.setForeground(new java.awt.Color(0, 0, 0));
        campoNumeroEmpleado.addActionListener(evt -> txtNoEmpActionPerformed(evt));
        panelPrincipal.add(campoNumeroEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 220, -1));

        // Configura la etiqueta del título
        etiquetaTitulo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18));
        etiquetaTitulo.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaTitulo.setText("Altas usuarios");
        panelPrincipal.add(etiquetaTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, -1, -1));

        // Configura la etiqueta "Nombre(s)"
        etiquetaNombres.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaNombres.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaNombres.setText("Nombre(s): ");
        panelPrincipal.add(etiquetaNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, -1));

        // Configura el campo para el Apellido Paterno (antes txtPriAp)
        campoApellidoPaterno.setBackground(new java.awt.Color(255, 255, 255));
        campoApellidoPaterno.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoApellidoPaterno.setForeground(new java.awt.Color(0, 0, 0));
        campoApellidoPaterno.addActionListener(evt -> txtPriApActionPerformed(evt));
        panelPrincipal.add(campoApellidoPaterno, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 250, -1));

        // Configura la etiqueta "Primer apellido"
        etiquetaApellidoPaterno.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaApellidoPaterno.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaApellidoPaterno.setText("Apellido Paterno:");
        panelPrincipal.add(etiquetaApellidoPaterno, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, -1, -1));

        // Configura el campo para el Apellido Materno (antes txtSecAp)
        campoApellidoMaterno.setBackground(new java.awt.Color(255, 255, 255));
        campoApellidoMaterno.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoApellidoMaterno.setForeground(new java.awt.Color(153, 153, 153));
        campoApellidoMaterno.addActionListener(evt -> txtSecApActionPerformed(evt));
        panelPrincipal.add(campoApellidoMaterno, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 250, -1));

        // Configura la etiqueta "Segundo apellido"
        etiquetaApellidoMaterno.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaApellidoMaterno.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaApellidoMaterno.setText("Apellido Materno:");
        panelPrincipal.add(etiquetaApellidoMaterno, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, -1, 20));

        

        // Configura la etiqueta "Correo principal"
        etiquetaEmailPrincipal.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaEmailPrincipal.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaEmailPrincipal.setText("Correo principal:");
        panelPrincipal.add(etiquetaEmailPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, -1, -1));

        // Configura la etiqueta "Correo secundario"
        etiquetaEmailSecundario.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaEmailSecundario.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaEmailSecundario.setText("Correo secundario:");
        panelPrincipal.add(etiquetaEmailSecundario, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, -1, -1));

        // Configura el campo para el RFC
        campoRfc.setBackground(new java.awt.Color(255, 255, 255));
        campoRfc.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoRfc.setForeground(new java.awt.Color(0, 0, 0));
        campoRfc.addActionListener(evt -> txtTelActionPerformed(evt));
        panelPrincipal.add(campoRfc, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, 250, -1));

        // Configura la etiqueta "Telefono"
        etiquetaTelefono.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaTelefono.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaTelefono.setText("Telefono:");
        panelPrincipal.add(etiquetaTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, -1, -1));

        // Configura el campo para el nombre
        campoNombres.setBackground(new java.awt.Color(255, 255, 255));
        campoNombres.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoNombres.setForeground(new java.awt.Color(0, 0, 0));
        campoNombres.addActionListener(evt -> txtNomActionPerformed(evt));
        panelPrincipal.add(campoNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 250, -1));

         //Configura la etiqueta vacía (posiblemente para espaciado)
        etiquetaVacia1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaVacia1.setForeground(new java.awt.Color(0, 0, 0));
        panelPrincipal.add(etiquetaVacia1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        // Configura la etiqueta "Departamento"
        etiquetaDepartamento.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaDepartamento.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaDepartamento.setText("Departamento:");
        panelPrincipal.add(etiquetaDepartamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, -1, -1));
        
        // Configura el campo para el email principal
        campoEmailPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        campoEmailPrincipal.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoEmailPrincipal.setForeground(new java.awt.Color(153, 153, 153));
        campoEmailPrincipal.addActionListener(evt -> txtEmailActionPerformed(evt));
        panelPrincipal.add(campoEmailPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, 260, -1));

        // Configura el campo para la contraseña
        campoEmailSecundario.setBackground(new java.awt.Color(255, 255, 255));
        campoEmailSecundario.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoEmailSecundario.setForeground(new java.awt.Color(0, 0, 0));
        campoEmailSecundario.addActionListener(evt -> txtEmail2ActionPerformed(evt));
        panelPrincipal.add(campoEmailSecundario, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 160, 260, -1));

        // Configura la etiqueta "Sexo"
        etiquetaSexo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaSexo.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaSexo.setText("Sexo:");
        panelPrincipal.add(etiquetaSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, -1, -1));

        // Configura el selector de género
        selectorGenero.setBackground(new java.awt.Color(255, 255, 255));
        selectorGenero.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        selectorGenero.setForeground(new java.awt.Color(0, 0, 0));
        selectorGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elije una opción", "FEMENINO", "MASCULINO", "OTRO" }));
        selectorGenero.addActionListener(evt -> txtGeneroActionPerformed(evt));
        panelPrincipal.add(selectorGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 340, -1, -1));

        // Configura el selector de estatus
        selectorDepartamento.setBackground(new java.awt.Color(255, 255, 255));
        selectorDepartamento.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        selectorDepartamento.setForeground(new java.awt.Color(0, 0, 0));
        //selectorEstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elije una opción", "ACTIVO", "BAJA" }));
        selectorDepartamento.addActionListener(evt -> txtselectorDepartamentoActionPerformed(evt));
        panelPrincipal.add(selectorDepartamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, 150, -1));

        // Configura el botón "Agregar"
        botonAgregar.setBackground(new java.awt.Color(153, 153, 153));
        botonAgregar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12));
        botonAgregar.setForeground(new java.awt.Color(0, 0, 0));
        botonAgregar.setText("Agregar");
        botonAgregar.addActionListener(evt -> botonAgregarActionPerformed(evt));
        panelPrincipal.add(botonAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 390, -1, -1));

        // Configura el botón "Siguiente"
        botonSiguiente.setBackground(new java.awt.Color(153, 153, 153));
        botonSiguiente.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12));
        botonSiguiente.setForeground(new java.awt.Color(0, 0, 0));
        botonSiguiente.setText("Siguiente");
        botonSiguiente.addActionListener(evt -> btnSalirActionPerformed(evt));
        panelPrincipal.add(botonSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 390, -1, -1));

        // Configura el botón "Limpiar"
        botonLimpiar.setBackground(new java.awt.Color(153, 153, 153));
        botonLimpiar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12));
        botonLimpiar.setForeground(new java.awt.Color(0, 0, 0));
        botonLimpiar.setText("Limpiar");
        botonLimpiar.addActionListener(evt -> btnCleanActionPerformed(evt));
        panelPrincipal.add(botonLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, -1, -1));

        // Configura la etiqueta "RFC"
        etiquetaRfc.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaRfc.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaRfc.setText("RFC:");
        panelPrincipal.add(etiquetaRfc, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 290, -1, -1));

        // Configura la etiqueta "CURP"
        etiquetaCurp.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14));
        etiquetaCurp.setForeground(new java.awt.Color(0, 0, 0));
        etiquetaCurp.setText("CURP:");
        panelPrincipal.add(etiquetaCurp, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, -1, -1));

        // Configura el botón "Salir"
        botonSalir.setBackground(new java.awt.Color(153, 153, 153));
        botonSalir.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 12));
        botonSalir.setForeground(new java.awt.Color(0, 0, 0));
        botonSalir.setText("Salir");
        botonSalir.addActionListener(evt -> btnSalir1ActionPerformed(evt));
        panelPrincipal.add(botonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 390, -1, -1));

        // Configura el campo para el teléfono
        campoTelefono.setBackground(new java.awt.Color(255, 255, 255));
        campoTelefono.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoTelefono.setForeground(new java.awt.Color(0, 0, 0));
        campoTelefono.addActionListener(evt -> txtTel1ActionPerformed(evt));
        panelPrincipal.add(campoTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 210, 260, -1));

        // Configura el campo para el CURP
        campoCurp.setBackground(new java.awt.Color(255, 255, 255));
        campoCurp.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 12));
        campoCurp.setForeground(new java.awt.Color(0, 0, 0));
        campoCurp.addActionListener(evt -> txtTel2ActionPerformed(evt));
        panelPrincipal.add(campoCurp, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 250, -1));

        // --- FINALIZACIÓN ---

        // Añade el panel principal al contenido de la ventana.
        getContentPane().add(panelPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 430));

        // Ajusta el tamaño de la ventana para que se adapte a sus componentes.
        pack();
       
    }

   
    private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {
        // Validación usando los nuevos nombres de variables

    // Definimos la consulta SQL con placeholders (?) para seguridad
        String sql = "INSERT INTO USUARIOS (NO_USUARIO, NOMBRE, APELLIDO_PAT, APELLIDO_MAT, CURP, RFC, TELEFONO, ID_DEPTO, SEXO, ESTATUS, CORREO_PRINCIPAL) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String sql2 = "INSERT INTO CORREOS_SECUNDARIOS (NO_USUARIO, CORREO)";
    // 3. --- LÓGICA DE INSERCIÓN EN LA BD ---
    // Usamos try-with-resources para que la conexión y el statement se cierren solos
        try (Connection conn = db.Conexion.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Asignamos cada variable a su placeholder correspondiente, en orden
            pstmt.setInt(1, Integer.parseInt(campoNumeroEmpleado.getText()));
            pstmt.setString(2, campoNombres.getText());
            pstmt.setString(3, campoApellidoPaterno.getText());
            pstmt.setString(4, campoApellidoMaterno.getText());
            pstmt.setString(5, campoCurp.getText());
            pstmt.setString(6, campoRfc.getText());
            pstmt.setString(7, campoTelefono.getText());
            pstmt.setString(8, selectorDepartamento.getSelectedItem().toString());
            pstmt.setString(9, selectorGenero.getSelectedItem().toString());
            pstmt.setString(10, "ACTIVO");
            pstmt.setString(11, campoEmailPrincipal.getText());

            
            String nombre = campoNombres.getText();
            String apellidoPat = campoApellidoPaterno.getText();
            String apellidoMat = campoApellidoMaterno.getText();
            String curp = campoCurp.getText();
            String rfc = campoRfc.getText();
            String telefono = campoTelefono.getText();
            String correo = campoEmailPrincipal.getText();
            String idDepto = (String) selectorDepartamento.getSelectedItem(); // Suponiendo un JComboBox
            String sexo = (String) selectorGenero.getSelectedItem(); 
            
            String error = validarDatosUsuario(nombre, apellidoPat, apellidoMat, curp, rfc, telefono, correo, idDepto, sexo);
        
            if (error != null) {
                // Si 'error' no es nulo, significa que una validación falló.
                JOptionPane.showMessageDialog(this, error, "Datos Inválidos", JOptionPane.WARNING_MESSAGE);
                return; // Detiene el proceso, no se guarda nada.
            }
// Ejecutamos la inserción y verificamos el resultado
            int filasAfectadas = pstmt.executeUpdate();
            
            
            

            JOptionPane.showMessageDialog(this, "Usuario agregado exitosamente (simulación).");
            botonLimpiarActionPerformed(null); // Llamamos a limpiar el formulario

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El número de empleado debe ser un valor numérico.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al agregar el usuario: " + e.getMessage(), "Error de Base de Datos", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        //quitamos espacios en blanco
        String emailSecundario = campoEmailSecundario.getText().trim();

        //Ejecuta este bloque SOLAMENTE si el campo de texto NO está vacío.
        if (!emailSecundario.isEmpty()) {
            try (Connection conn = db.Conexion.getConnection();
             PreparedStatement pstmt2 = conn.prepareStatement(sql2)) {
                pstmt2.setString(1, campoNumeroEmpleado.getText());
                pstmt2.setString(2, campoEmailSecundario.getText());
            
            int filasAfectadas = pstmt2.executeUpdate();
            
            
            
            }catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El correo debe ser real", "Error de Formato", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al agregar el usuario: " + e.getMessage(), "Error de Base de Datos", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
        
        
    }

    private void botonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {
        // Lógica para el botón "Siguiente"
        System.exit(0);
    }

    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {
        // Limpieza de campos usando los nuevos nombres y la lógica corregida
        campoNumeroEmpleado.setText("");
        campoNombres.setText("");
        campoApellidoPaterno.setText("");
        campoApellidoMaterno.setText("");
        campoEmailPrincipal.setText("");
        campoEmailSecundario.setText("");
        campoRfc.setText("");
        campoCurp.setText("");
        campoTelefono.setText("");
        
        // CORRECCIÓN: Reinicia la selección en lugar de borrar los items.
        selectorGenero.setSelectedIndex(0);
        selectorDepartamento.setSelectedIndex(0);
    }

    
    
    
    //recorrer deptos
    private void cargarDepartamentos() {
        // 1. Crea un modelo para el ComboBox. Es la forma correcta de llenarlo dinámicamente.
        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();
        modelo.addElement("Seleccione un departamento"); // Texto inicial

        // 2. Define la consulta SQL para obtener los IDs de los departamentos.
        //    ¡Asegúrate de que el nombre de la tabla 'DEPARTAMENTOS' sea correcto!
        String sql = "SELECT ID_DEPTO FROM DEPARTAMENTOS WHERE ESTATUS = 'ACTIVO' ORDER BY ID_DEPTO";

        // 3. Usa try-with-resources para conectar y ejecutar la consulta de forma segura.
        try (Connection conn = db.Conexion.getConnection(); // Usa tu clase de conexión
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            // 4. Recorre los resultados y añádelos al modelo.
            while (rs.next()) {
                System.out.println("si lee");
                String idDepto = rs.getString("ID_DEPTO");
                modelo.addElement(idDepto);
            }

            // 5. Asigna el modelo ya lleno a tu JComboBox.
            selectorDepartamento.setModel(modelo);

        } catch (Exception e) {
            // 6. Maneja cualquier error que pueda ocurrir.
            JOptionPane.showMessageDialog(this,
                    "Error al cargar los departamentos: " + e.getMessage(),
                    "Error de Base de Datos",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(FrmUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            new FrmUsuarios().setVisible(true);
        });
    }
    
    //validar datos
    public String validarDatosUsuario(String nombre, String apellidoPat, String apellidoMat,
                                      String curp, String rfc, String telefono,
                                      String correo, String idDepto, String sexo) {

        // --- Restricciones NOT NULL y de longitud básica ---
        if (nombre == null || nombre.trim().isEmpty()) return "El NOMBRE no puede estar vacío.";
        if (nombre.length() > 40) return "El NOMBRE no puede exceder los 40 caracteres.";

        if (apellidoPat.length() > 30) return "El APELLIDO PATERNO no puede exceder los 30 caracteres.";
        if (apellidoMat.length() > 30) return "El APELLIDO MATERNO no puede exceder los 30 caracteres.";

        if (curp == null || curp.trim().isEmpty()) return "El CURP no puede estar vacío.";
        if (rfc == null || rfc.trim().isEmpty()) return "El RFC no puede estar vacío.";
        if (telefono == null || telefono.trim().isEmpty()) return "El TELÉFONO no puede estar vacío.";
        if (correo == null || correo.trim().isEmpty()) return "El CORREO no puede estar vacío.";
        if (correo.length() > 200) return "El CORREO no puede exceder los 200 caracteres.";

        if (idDepto == null || idDepto.trim().isEmpty()) return "Debe seleccionar un DEPARTAMENTO.";
        if (sexo == null || sexo.trim().isEmpty()) return "Debe seleccionar un SEXO.";

        // --- Restricciones CHECK (CHK_*) ---

        // CHK_APELLIDOS: Al menos uno de los dos debe tener valor.
        if ((apellidoPat == null || apellidoPat.trim().isEmpty()) && (apellidoMat == null || apellidoMat.trim().isEmpty())) {
            return "Debe proporcionar al menos un APELLIDO (Paterno o Materno).";
        }

        // CHK_LONG_TEL: Teléfono debe tener 10 dígitos numéricos.
        if (!telefono.matches("\\d{10}")) { // \\d es para un dígito, {10} es para 10 veces
            return "El TELÉFONO debe contener exactamente 10 dígitos numéricos.";
        }

        // CHK_SEX: Sexo debe estar en la lista de valores permitidos.
        List<String> sexosPermitidos = Arrays.asList("FEMENINO", "MASCULINO", "OTRO");
        if (!sexosPermitidos.contains(sexo.toUpperCase())) {
            return "El valor para SEXO no es válido. Use 'FEMENINO', 'MASCULINO' u 'OTRO'.";
        }

        // --- Restricciones de formato (REGEXP_LIKE) ---

        // CHK_CURP
        String regexCurp = "^[A-Z]{4}[0-9]{6}[A-Z]{6}[A-Z0-9]{2}$";
        if (!curp.toUpperCase().matches(regexCurp)) {
            return "El formato del CURP no es válido. Verifique los 18 caracteres.";
        }

        // CHK_RFC
        String regexRfc = "^[A-Z]{4}[0-9]{6}[A-Z0-9]{3}$";
        if (!rfc.toUpperCase().matches(regexRfc)) {
            return "El formato del RFC no es válido. Verifique los 13 caracteres.";
        }

        // CHK_CORREO_PRINCIPAL_FORMAT
        String regexCorreo = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$";
        if (!correo.matches(regexCorreo)) {
            return "El formato del CORREO ELECTRÓNICO no es válido.";
        }

        // Si todas las validaciones pasaron, no hay error.
        return null;
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">                                              

    private javax.swing.JButton botonAgregar;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JButton botonSiguiente;
    private javax.swing.JButton botonSalir;
    private javax.swing.JTextField campoApellidoMaterno;
    private javax.swing.JTextField campoApellidoPaterno;
    private javax.swing.JTextField campoEmailSecundario;
    private javax.swing.JTextField campoCurp;
    private javax.swing.JTextField campoEmailPrincipal;
    private javax.swing.JTextField campoNombres;
    private javax.swing.JTextField campoNumeroEmpleado;
    private javax.swing.JTextField campoRfc;
    private javax.swing.JTextField campoTelefono;
    private javax.swing.JLabel etiquetaApellidoMaterno;
    private javax.swing.JLabel etiquetaApellidoPaterno;
    private javax.swing.JLabel etiquetaCurp;
    private javax.swing.JLabel etiquetaDepartamento;
    private javax.swing.JLabel etiquetaEmailPrincipal;
    private javax.swing.JLabel etiquetaEmailSecundario;
    private javax.swing.JLabel etiquetaNombres;
    private javax.swing.JLabel etiquetaNumeroEmpleado;
    private javax.swing.JLabel etiquetaRfc;
    private javax.swing.JLabel etiquetaSexo;
    private javax.swing.JLabel etiquetaTelefono;
    private javax.swing.JLabel etiquetaTitulo;
    private javax.swing.JLabel etiquetaVacia1;
    private javax.swing.ButtonGroup grupoBotones;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JComboBox<String> selectorDepartamento;
    private javax.swing.JComboBox<String> selectorGenero;
    // End of variables declaration                   

    private void txtNoEmpActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtPriApActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtSecApActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtEmailActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtTelActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtNomActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtEmail2ActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtGeneroActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtselectorDepartamentoActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    private void btnSalirActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void btnCleanActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void btnSalir1ActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtTel1ActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void txtTel2ActionPerformed(ActionEvent evt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}